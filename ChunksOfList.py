"""
yield is used to generate a sequence of values one at a time, instead of all at once.
It allows a function to pause its execution and return a value,
but keep its state so that it can resume where it left off the next time it's called.
Think of it as a simplified version of a return statement.
Instead of returning just once, a function using yield can return multiple values, one at a time, each time it's called.
To use yield, simply replace the return keyword with yield in a function definition.
When a function containing a yield statement is called, it returns a generator object,
which can be used to iterate through the values generated by the yield statement.

"""


# WAP to break a list into chunks of size N


def divide_chunks(l, n):
    # looping till length l
    for i in range(0, len(l), n):
        yield l[i:i + n]


my_list = ['Life', 'Is', 'So', 'Boring', 'Is', 'There', 'Some', 'Way', 'To', 'Chill', 'And', 'Not', 'Work', 'For',
           'Some', 'Days']

chunks = int(input('Enter the number of chunks: '))  # 4

x = list(divide_chunks(my_list, chunks))
print(x)

'''
Explanation:
This for loop is used to divide the input list l into smaller chunks of size n.

i is a loop variable that takes on each value in the range (0, len(l), n).
The range function generates a sequence of numbers starting from 0, ending at len(l), and incrementing by n each time.

The loop body yield l[i:i + n] slices the input list l from index i to i + n, 
and returns this chunk using the yield statement.

For example, if l = [1, 2, 3, 4, 5, 6] and n = 2, the loop would execute 3 times with the following values of i:

1st iteration: i = 0, l[i:i + n] = l[0:0 + 2] = [1, 2]

2nd iteration: i = 2, l[i:i + n] = l[2:2 + 2] = [3, 4]

3rd iteration: i = 4, l[i:i + n] = l[4:4 + 2] = [5, 6]

So, the loop is used to divide the input list l into smaller chunks of size n, and each chunk is returned one at a time using the yield statement.
'''
